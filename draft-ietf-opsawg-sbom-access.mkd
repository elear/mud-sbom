---
title: Discovering and Retrieving Software Transparency and Vulnerability Information
abbrev: Discovering SBOMs and Vuln. Info
docname: draft-ietf-opsawg-sbom-access-16
submissionType: IETF
category: std
ipr: trust200902
keyword: Internet-Draft

stand_alone: yes
pi: [toc, sortrefs, symrefs]

author:
 -
    ins: E. Lear
    name: Eliot Lear
    org: Cisco Systems
    street: Richtistrasse 7
    code: CH-8304
    city: Wallisellen
    country: Switzerland
    phone: "+41 44 878 9200"
    email: lear@cisco.com
 -
    ins: S. Rose
    name: Scott Rose
    org: NIST
    street: 100 Bureau Dr
    code: "20899"
    city: Gaithersburg MD
    country: USA
    phone: "+1 301-975-8439"
    email: scott.rose@nist.gov

normative:
   RFC2119:
   RFC6241:
   RFC6991:
   RFC7252:
   RFC8040:
   RFC8174:
   RFC9110:
   
informative:
   EO2021:
     title: Executive Order 14028, Improving the Nations Cybersecurity
     author:
       ins: J. Biden
       name: President Joseph Biden
       org: United States Of America
     date: May, 2021
   SPDX:
     title: SPDX Specification V2.3
     author:
       org: The Linux Foundation
     date: 2022
     target: https://spdx.github.io/spdx-spec/v2.3/
   CycloneDX12:
     title: CycloneDX XML Reference v1.2
     author:
       org: cyclonedx.org
     date: May, 2020
   CSAF:
     title: Common Security Advisory Framework Version 2.0
     author:
      -
        ins: L. Rock
        name: Langley Rock
        role: editor
        org: OASIS
      -
        ins: S. Hagen
        name: Stefan Hagen
        role: editor
        org: OASIS
      -
        ins: T. Schmidt
        name: Thomas Schmidt
        role: editor
        org: OASIS
     target: https://docs.oasis-open.org/csaf/csaf/v2.0/csaf-v2.0.html
     date: November, 2022
   CVRF:
     title: Common Vulnerability Reporting Framework (CVRF) Version 1.2
     author:
        ins: S. Hagen
        name: Stefan Hagen
        role: editor
        org: OASIS
     target: https://docs.oasis-open.org/csaf/csaf-cvrf/v1.2/csaf-cvrf-v1.2.pdf
     date: September, 2017
   NISTNVD:
     title: National Vulnerability Database
     author:
        org: NIST
     target: https://nvd.nist.gov


--- abstract

To improve cybersecurity posture, automation is necessary to locate
the software a device is using, and whether that software has known
vulnerabilities, and what, if any recommendations suppliers may have.
This memo extends the MUD YANG schema to provide the locations of software
bills of materials (SBOMS) and to vulnerability information by introducing
a transparency schema.


--- middle

Introduction
============

A number of activities have been working to improve visibility to what
software is running on a system, and what vulnerabilities that
software may have {{EO2021}}.

Put simply, this memo seeks to answer two classes of questions to the
scale of tens of thousands of devices and a large variety of types of
devices.  Those questions are as the following:

 - Is this system vulnerable to a particular vulnerability?
 - Which devices in a particular environment contain vulnerabilities
   that require some action?

This memo doesn't specify the format of this information, but rather
only how to locate and retrieve these objects.  That is, the model is
intended to facilitate discovery, and on its own provides no access to the
underlying data.

Software bills of materials (SBOMs) are descriptions of what software,
including versioning and dependencies, a device contains.  There
are different SBOM formats such as Software Package Data Exchange
{{SPDX}} or CycloneDX{{CycloneDX12}}.

System vulnerabilities may similarly be described using several data
formats, including the aforementioned CycloneDX, Common Vulnerability
Reporting Framework {{CVRF}}, the Common Security Advisory Format
{{CSAF}}.  This information is typically used to report to
administrators the state of any known vulnerabilities on a system.

SBOM and vulnerability information can be used in concert with other
sources of vulnerability information.  For a network management tool
could discover that a system makes use of a particular set of software
components, searches a national vulnerability database to determine
known vulnerabilities, and then applies information provided the
manufacturer through this mechanism to produce a vulnerability report.
That report may be used to indicate what if any versions of software
correct that vulnerability, or whether the system exercises the
vulnerable code at all.

Both classes of information elements are optional under the model
specified in this memo.  One can provide only an SBOM, only
vulnerability information, or both an SBOM and vulnerability
information.

Note that SBOM formats may also carry other information, the most
common being any licensing terms.  Because this specification is
neutral regarding content, it is left for format developers such as
the Linux Foundation, OASIS, and ISO to decide what attributes they
will support.

This memo does not specify how vulnerability information may be
retrieved directly from the endpoint.  That's because vulnerability
information changes occur at different rates to software updates.
However, some SBOM formats may also contain vulnerability information.

SBOMs and vulnerability information are advertised and retrieved
through the use of a YANG augmentation of the Manufacturer User
Description (MUD) model {{!RFC8520}}.  Note that the schema creates a
grouping that can also be used independently of MUD.  Moreover, other
MUD features, such as access controls, needn't be present.

The mechanisms specified in this document are meant to address two
use cases:

* A network-layer management system retrieving information from an IoT
  device as part of its ongoing lifecycle. Such devices may or may not
  have query interfaces available.

* An application-layer management system retrieving vulnerability or
  SBOM information in order to evaluate the posture of an application
  server of some form.  These application servers may themselves be
  containers or hypervisors.  Discovery of the topology of a server is
  beyond the scope of this memo.

To satisfy these two key use cases, objects may be found in one of
three methods:

* on devices themselves
* on a website (e.g., via URI)
* through some form of out-of-band contact with the supplier.

Using the first method, devices will have interfaces that permit
direct retrieval.  Examples of these interfaces might be an HTTP
{{RFC9110}}, or COAP {{RFC7252}} endpoint for retrieval.
There may also be private interfaces as well.

Using the second method, when a device does not have an appropriate
retrieval interface, but one is directly available from the
manufacturer, a URI to that information is discovered through
interfaces such as MUD via DHCP or bootstrapping and ownership
transfer mechanisms.

Using the third method, a supplier may wish to make an SBOM or
vulnerability information available under certain circumstances, and
may need to individually evaluate requests.  The result of that
evaluation might be the SBOM or vulnerability itself or a restricted
URL or no access.

To enable application-layer discovery, this memo defines a well-known
URI {{!RFC8615}}.  Management or orchestration tools can query this
well-known URI to retrieve a system's SBOM information.  Further
queries may be necessary based on the content and structure of the
response.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCP 14 {{RFC2119}} {{RFC8174}} when, and only when, they
appear in all capitals, as shown here.

How This Information Is Retrieved
---------------------------------

Section 4 describes a data model to extend the MUD file format to carry SBOM
and vulnerability information.  Section 1.5 of RFC8520 describes mechanisms by
which devices can emit a URL to point to this file.  Additionally, devices can
share this URL either through documentation or within a QR code on a box. 
Section 2 describes a well-known URL from which an SBOM could be served from
the local device.

Note that vulnerability and SBOM information are likely to change at
different rates.  MUD's cache-validity node provides a way for
manufacturers to control how often tooling should check for those
changes through the cache-validity node.

Formats
------------
There are multiple ways to express both SBOMs and vulnerability
information.  When these are retrieved either from the device
or from a remote web server, tools will need to observe the
Content-Type header to determine precisely which format is being
transmitted.  Because IoT devices in particular have limited
capabilities, use of a specific Accept: header in HTTP or the Accept
Option in CoAP is NOT RECOMMENDED.  Instead, backend tooling is
encouraged to support all known formats, and SHOULD silently discard
SBOM information sent with a media type that is not understood.

If multiple SBOMs are intended to be supported in the same file, the
media type should properly reflect that.  For example, one might make
use of application/\{someformat\}+json-seq.  It is left to those
supporting those formats to make the appropriate registrations in this
case.

Some formats may support both vulnerability and software inventory
information.  When both vulnerability and software inventory
information is available from the same URL, both sbom-url and
vuln-url nodes MUST indicate that.  Network management systems
retrieving this information MUST take note that the identical resource
is being retrieved rather than retrieving it twice.

The well-known transparency endpoint set
=================================

A well-known endpoint is defined:

 - "/.well-known/sbom" retrieves an SBOM.
 
As discussed previously, the precise format of a response is based on
the Content-type provided.


The mud-transparency extension model extension
======================================

We now formally define this extension.  This is done in two parts.
First, the extension name "transparency" is listed in the "extensions"
array of the MUD file.  N.B., this schema extension is intended to be
used wherever it might be appropriate (e.g., not just MUD).

Second, the "mud" container is augmented with a list of SBOM sources.

This is done as follows:

~~~~~~~~~
{::include yang.tree}
~~~~~~~~~

See {{?RFC8340}} for a description of YANG trees.

The mud-sbom augmentation to the MUD YANG model
============================

~~~~~
<CODE BEGINS>file "ietf-mud-transparency@2023-01-12.yang"
{::include ietf-mud-transparency.yang}
<CODE ENDS>
~~~~~~


Examples
========

In this example MUD file that uses a cloud service, the modelX
presents a location of the SBOM in a URL.  Note, the ACLs in a MUD
file are NOT required, although they are a very good idea for IP-based
devices.  

Without ACLS
------------

This first MUD file demonstrates how to get SBOM and
vulnerability information without ACLs.

~~~~~~~~
{::include cloud-example1.json}
~~~~~~~~

The second example demonstrates that just SBOM information is included.

~~~~~~~~
{::include cloud-example2.json}
~~~~~~~~

SBOM Located on the Device
--------------------------

In this example, the SBOM is retrieved from the device, while
vulnerability information is available from the cloud.  This is likely
a common case, because vendors may learn of vulnerability information
more frequently than they update software.

~~~~~~~~
{::include mixed-example.json}
~~~~~~~~

Further contact required.
-------------------------

In this example, the network manager must take further steps
to retrieve SBOM information.  Vulnerability information is
still available.

~~~~~~~~
{::include contact-info.json}
~~~~~~~~

With ACLS
----------

Finally, here is a complete example where the device provides
SBOM and vulnerability information, as well as access-control
information.

~~~~~~~~
{::include complete-example.json}
~~~~~~~~
At this point, the management system can attempt to retrieve the SBOM,
and determine which format is in use through the content-type header
on the response to a GET request, independently repeat the process for
vulnerability information, and apply ACLs, as appropriate.

Security Considerations
=======================
This document describes a schema for discovering the location of
information relating to software transparency, and does not specify
the access model for the information itself.  In particular, the YANG
module specified in this document is not necessarily intended to be
accessed via regular network management protocols, such as the NETCONF
[RFC6241] or RESTCONF [RFC8040], and hence the regular security
considerations for such usage are not considered here.
 

We describe below protections relating to both discovery and some
advice on protecting the underlying SBOM/vulnerability information.

The model specifies both encrypted and unencrypted means to retrieve
information.  This is a matter of pragmatism.  Unencrypted
communications allow for manipulation of information being retrieved.
Therefore, it is RECOMMENDED that implementations offer a means to
configure endpoints so that they may make use of TLS or DTLS.

The ietf-mud-transparency module has no operational impact on the
element itself, and is used to discover state information that may be
available on or off the element.  In as much as the module itself is
made writeable, this only indicates a change in how to retrieve
read-only elements.  There is no means, for instance, to upload an
SBOM.  Additional risks are discussed below, and are applicable to all
nodes within the transparency container.

If an attacker modifies the elements, they may misdirect automation to
retrieve a different set of URLs than was intended by the designer.  This
in turn leads to two specific sets of risks:

 - the information retrieved would be false.
 - the URLs themselves point to malware.

To address either risk, any change in a URL, and in particular to the
authority section, two approaches may be used:

* test any cloud-based URL against a reputation service.
* provide the administrator an opportunity to approve further procesisng
  when the authority changes to one not known to be reputable.

SBOMs provide an inventory of software.  Knowledge of which specific
software is loaded on a system can aid an attacker in identifying an
appropriate exploit for a known vulnerability or guide the development
of novel exploit against this system.  However, if software is
available to an attacker, the attacker may well already be able to
derive this very same software inventory.  When this information
resides on the endpoint itself, the endpoint SHOULD NOT provide
unrestricted access to the well-known URL by default.

Other servers that offer the data MAY restrict access to SBOM
information using appropriate authorization semantics within HTTP.
One way to do this would be to issue a certificate to the client for
this purpose after a registration process has taken place.  Another
approach would involve the use of OAUTH in combination.  In
particular, if a system attempts to retrieve an SBOM via HTTP or COAP
and the client is not authorized, the server MUST produce an
appropriate error, with instructions on how to register a particular
client.


Another risk is a skew in the SBOM listing and the actual software
inventory of a device/container. For example, a manufacturer may
update the SBOM on its server, but an individual device has not been
upgraded yet.  This may result in an incorrect policy being applied to
a device. A unique mapping of a device's software version and its SBOM
can minimize this risk.

To further mitigate attacks against a device, manufacturers SHOULD
recommend network access controls.

Vulnerability information is generally made available to such
databases as NIST's National Vulnerability Database {{NISTNVD}}.  It
is possible that vendors may wish to release information early to some
customers.  We do not discuss here whether that is a good idea, but if
it is employed, then appropriate access controls and authorization
SHOULD be applied to that information.

IANA Considerations
===================

MUD Extension
-------------

The IANA is requested to add "transparency" to the MUD
extensions registry as follows:

~~~~~~~

  Extension Name: transparency
  Standard reference: This document

~~~~~~~

YANG Registration
-----------------

The following YANG module should be registered in the "YANG Module
Names" registry:

~~~~~
   Name: ietf-mud
   URN: urn:ietf:params:xml:ns:yang:ietf-mud-transparency
   Prefix: mudtx
   Registrant contact: The IESG
   Reference: This memo
~~~~~

The following XML registration is requested:

~~~~~
   URI: urn:ietf:params:xml:ns:yang:ietf-mud-transparency
   Registrant Contact: IESG
   XML: None.  Namespace URIs do not represent an XML specification.
~~~~~

Well-Known Prefix
-----------------

The following well known URI is requested in accordance with
{{!RFC8615}}:

~~~~~~

  URI suffix: "sbom"
  Change controller: "IETF"
  Specification document: This memo
  Related information:  See ISO/IEC 5962:2021 and SPDX.org

~~~~~~

Acknowledgments
===============

Thanks to Russ Housley, Dick Brooks, Tom Petch, Nicolas Comstedt, who
provided review comments.

--- back


Changes from Earlier Versions
=============================

Draft -04:
  * Address review comments

Draft -02:

  * include vulnerability information
  
Draft -01:

* some modest changes

Draft -00:

  * Initial revision
