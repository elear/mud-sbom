---
title: Discovering and Retrieving Software Transparency and Vulnerability Information
abbrev: Discovering SBOMs and Vuln. Info
docname: draft-ietf-opsawg-sbom-access-04
category: std
ipr: trust200902
keyword: Internet-Draft

stand_alone: yes
pi: [toc, sortrefs, symrefs]

author:
 -
    ins: E. Lear
    name: Eliot Lear
    org: Cisco Systems
    street: Richtistrasse 7
    code: CH-8304
    city: Wallisellen
    country: Switzerland
    phone: "+41 44 878 9200"
    email: lear@cisco.com
 -
    ins: S. Rose
    name: Scott Rose
    org: NIST
    street: 100 Bureau Dr
    code: "20899"
    city: Gaithersburg MD
    country: USA
    phone: "+1 301-975-8439"
    email: scott.rose@nist.gov

normative:
   RFC2119:
   RFC8174:
   RFC6991:

informative:
   EO2021:
     title: Executive Order 14028, Improving the Nations Cybersecurity
     author:
       ins: J. Biden
       name: President Joseph Biden
       org: United States Of America
     date: May, 2021
   SPDX:
     title: SPDX Specification 2.1
     author:
       org: The Linux Foundation
     date: 2016
   CycloneDX12:
     title: CycloneDX XML Reference v1.2
     author:
       org: cylonedx.org
     date: May, 2020
   OpenC2:
     title: Specification for Transfer of OpenC2 Messages via HTTPS Version 1.0
     author:
        ins: D. Lemire
        name: David Lemire
        role: editor
        org: OASIS
     target: https://docs.oasis-open.org/openc2/open-impl-https/v1.0/open-impl-https-v1.0.html
     date: 11 July 2019
   CSAF:
     title: Common Security Advisory Format
     author:
        org: OASIS
     target: https://github.com/oasis-tcs/csaf
     date: July, 2021
   CVRF:
     title: Common Vulnerability Reporting Framework (CVRF) Version 1.2
     author:
        ins: O. Santos
        name: Omar Santos
        role: editor
        org: OASIS
     target: https://docs.oasis-open.org/csaf/csaf-cvrf/v1.2/csaf-cvrf-v1.2.pdf
     date: September, 2017
     
        
       
     
--- abstract

To improve cybersecurity posture, automation is necessary to locate
what software is running on a device, whether that software has known
vulnerabilities, and what, if any recommendations suppliers may have.
This memo specifies a model to provide access to this information.  It
may optionally be discovered through manufacturer usage descriptions.

--- middle

Introduction
============

A number of activities have been working to improve visibility to what
software is running on a system, and what vulnerabilities that
software may have{{EO2021}}.

Put simply, we seek to answer two classes of questions **at scale**:

 - Is this system vulnerable to a particular vulnerability?
 - Which devices in a particular environment contain vulnerabilities
   that require some action?

This memo doesn't specify the format of this information, but rather
only how to locate and retrieve these objects.

Software bills of materials (SBOMs) are descriptions of what software,
including versioning and dependencies, a device contains.  There
are different SBOM formats such as Software Package Data Exchange
{{SPDX}} or CycloneDX{{CycloneDX12}}.

System vulnerabilities may similarly be described using several data
formats, including the aforementioned CycloneDX, Common Vulnerability
Reporting Framework {{CVRF}}, the Common Security Advisory Format {{CSAF}}.
This information is typically used to report to customers the state of
a system.

These two classes of information can be used in concert.  For
instance, a network management tool may discover that a system makes
use of a particular software component that has a known vulnerability,
and a vulnerability report may be used to indicate what if any
versions of software correct that vulnerability, or whether the system
exercises the vulnerable code at all.

Both classes of information elements are optional under the model
specified in this memo.  One can provide only an SBOM, only
vulnerability information, or both an SBOM and vulnerability
information.

Note that SBOM formats may also carry other information, the most
common being any licensing terms.  Because this specification is
neutral regarding content, it is left for format developers such as
the Linux Foundation, OASIS, and ISO to decide what attributes they
will support.

This memo does not specify how vulnerability information may be
retrieved directly from the endpoint.  That's because vulnerability
information changes occur at different rates to software updates.
However, some SBOM formats may also contain vulnerability information.

SBOMs and vulnerability information are advertised and retrieved
through the use of a YANG augmentation of the Manufacturer User
Description (MUD) model {{!RFC8520}}.  Note that the schema creates a
grouping that can also be used independently of MUD.  Moreover, other
MUD features, such as access controls, needn't be present.

The mechanisms specified in this document are meant to satisfy several
use cases:

* A network-layer management system retrieving information from an IoT
  device as part of its ongoing lifecycle. Such devices may or may not
  have query interfaces available.

* An application-layer management system retrieving vulnerability or
  SBOM information in order to evaluate the posture of an application
  server of some form.  These application servers may themselves be
  containers or hypervisors.  Discovery of the topology of a server is
  beyond the scope of this memo.

To satisfy these two key use cases, objects may be found in one of
three ways:

* on devices themselves
* on a web site (e.g., via URI)
* through some form of out-of-band contact with the supplier.

In the first case, devices will have interfaces that permit direct
retrieval.  Examples of these interfaces might be an HTTP, COAP
or {{OpenC2}} endpoint for retrieval.  There may also be private
interfaces as well.

In the second case, when a device does not have an appropriate
retrieval interface, but one is directly available from the
manufacturer, a URI to that information MUST be discovered.

In the third case, a supplier may wish to make an SBOM or
vulnerability information available under certain circumstances, and
may need to individually evaluate requests.  The result of that
evaluation might be the SBOM or vulnerability itself or a restricted
URL or no access.

To enable application-layer discovery, this memo defines a well-known
URI {{!RFC8615}}.  Management or orchestration tools can query this
well-known URI to retrieve a system's SBOM or vulnerability
information.  Further queries may be necessary based on the content
and structure of the response.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCP 14 {{RFC2119}} {{RFC8174}} when, and only when, they
appear in all capitals, as shown here.

Cases Not Addressed
-------------------
\[ This section to be removed prior to publication \]

A separate use case may be addressed in future versions of this document:

* Related to the application layer, software as a service may
  involve multiple backend systems, depending on many factors.
  One example might be a large cloud-based service that offers
  spreadsheets, email, and document authoring and management.
  Depending on what service is being used, a different set of
  back end services may in turn be invoking different software
  that should be listed.

The reason why this use case isnâ€™t addressed here is that it may be
better addressed inline within HTML.  Further discussion is required.

How This Information Is Retrieved
---------------------------------

For devices that can emit a URL or can establish a well-known URI, the
mechanism may be highly automated.  For devices that have a URL in
either their documentation or within a QR code on a box, the mechanism
is semi-automated (someone has to scan the QR code or enter the URL).

Note that vulnerability and SBOM information is likely to  change at
different rates.  The MUD semantics provide a way for manufacturers
to control how often tooling should check for those changes through
the cache-validity node.

Formats
------------
There are multiple ways to express both SBOMs and vulnerability
information.  When these are retrieved either directly from the device
or directly from a web server, tools will need to observe the
content-type header to determine precisely which format is being
transmitted.  Because IoT devices in particular have limited
capabilities, use of a specific Accept: header in HTTP or the Accept
Option in CoAP is NOT RECOMMENDED.  Instead, backend tooling is
encouraged to support all known formats, and SHOULD silently discard
SBOM information sent with a media type that is not understood.

Some formats may support both vulnerability and software inventory
information.  When both vulnerability and software inventory
information is available from the same location, both sbom and vuln
nodes MUST indicate that.  Network management systems retrieving
this information MUST take note that the identical resource is being
retrieved rather than retrieving it twice.

Discussion points
-----------------
The following is discussion to be removed at time of RFC publication.

 * Is the model structured correctly?
 * Are there other retrieval mechanisms that need to be specified?
 * Do we need to be more specific in how to authenticate and retrieve
   SBOMs?
 * What are the implications if the MUD URL is an extension in a certificate
   (e.g. an IDevID cert)?


The well-known transparency endpoint set
=================================

Two well known endpoints are defined:

 - "/.well-known/sbom" retrieves an SBOM.
 - "/.well-known/openc2" is the HTTPS binding to OpenC2.
 
As discussed previously, the precise format of a response is based on
the Content-type provided.


The mud-transparency extension model extension
======================================

We now formally define this extension.  This is done in two parts.
First, the extension name "transparency" is listed in the "extensions"
array of the MUD file.  N.B., this schema extension is intended to be
used wherever it might be appropriate (e.g., not just MUD).

Second, the "mud" container is augmented with a list of SBOM sources.

This is done as follows:

~~~~~~~~~
{::include yang.tree}
~~~~~~~~~

The mud-sbom augmentation to the MUD YANG model
============================

~~~~~
<CODE BEGINS>file "ietf-mud-transparency@2021-10-22.yang"
{::include ietf-mud-transparency.yang}
<CODE ENDS>
~~~~~~


Examples
========

In this example MUD file that uses a cloud service, the modelX
presents a location of the SBOM in a URL.  Note, the ACLs in a MUD
file are NOT required, although they are a very good idea for IP-based
devices.  

Without ACLS
------------

This first MUD file demonstrates how to get SBOM and
vulnerability information without ACLs.

~~~~~~~~
{::include cloud-example1.json}
~~~~~~~~

The second example demonstrates that just SBOM information is included.

~~~~~~~~
{::include cloud-example2.json}
~~~~~~~~

SBOM Located on the Device
--------------------------

In this example, the SBOM is retrieved from the device, while
vulnerability information is available from the cloud.  This is likely
a common case, because vendors may learn of vulnerability information
more frequently than they update software.

~~~~~~~~
{::include mixed-example.json}
~~~~~~~~

Further contact required.
-------------------------

In this example, the network manager must take further steps
to retrieve SBOM information.  Vulnerability information is
still available.

~~~~~~~~
{::include contact-info.json}
~~~~~~~~

With ACLS
----------

Finally, here is a complete example where the device provides
SBOM and vulnerability information, as well as access-control
information.

~~~~~~~~
{::include complete-example.json}
~~~~~~~~
At this point, the management system can attempt to retrieve the SBOM,
and determine which format is in use through the content-type header
on the response to a GET request, independently repeat the process for
vulnerability information, and apply ACLs, as appropriate.

Security Considerations
=======================
SBOMs provide an inventory of software.  If software is available to
an attacker, the attacker may well already be able to derive this very
same software inventory.  Manufacturers MAY restrict access to SBOM
information using appropriate authorization semantics within HTTP.  In
particular, if a system attempts to retrieve an SBOM via HTTP and the
client is not authorized, the server MUST produce an appropriate
error, with instructions on how to register a particular client.  One
example may be to issue a certificate to the client for this purpose
after a registration process has taken place.  Another example would
involve the use of OAUTH in combination with a federations of SBOM
servers.

Another risk is a skew in the SBOM listing and the actual software
inventory of a device/container. For example, a manufacturer may
update the SBOM on its server, but an individual device has not been
upgraded yet.  This may result in an incorrect policy being applied to
a device. A unique mapping of a device's software version and its SBOM
can minimize this risk.

To further mitigate attacks against a device, manufacturers SHOULD
recommend access controls through the normal MUD mechanism.

Vulnerability information is generally made available to such databases
as NIST's National Vulnerability Database.  It is possible that vendor
may wish to release information early to some customers.  We do not
discuss here whether that is a good idea, but if it is employed, then
appropriate access controls and authorization would be applied to the
vulnerability resource.

IANA Considerations
===================

MUD Extension
-------------

The IANA is requested to add "transparency" to the MUD
extensions registry as follows:

~~~~~~~

  Extension Name: transparency
  Standard reference: This document

~~~~~~~

YANG Registration
-----------------

The following YANG module should be registered in the "YANG Module
Names" registry:

~~~~~
   Name: ietf-mud
   URN: urn:ietf:params:xml:ns:yang:ietf-mud-transparency
   Prefix: mudtx
   Registrant contact: The IESG
   Reference: This memo
~~~~~



Well-Known Prefix
-----------------

The following well known URIs are requested in accordance with
{{!RFC8615}}:

~~~~~~

  URI suffix: "sbom"
  Change controller: "IETF"
  Specification document: This memo
  Related information:  See ISO/IEC 19970-2 and SPDX.org

  URI suffix: "openc2"
  Change controller: "IETF"
  Specification document: This memo
  Related information:  OpenC2 Project

~~~~~~

Acknowledgments
===============

Thanks to Russ Housley, Dick Brooks, Tom Petch, Nicolas Comstedt, who
provided revew comments.

--- back


Changes from Earlier Versions
=============================

Draft -04:
  * Address review comments

Draft -02:

  * include vulnerability information
  
Draft -01:

* some modest changes

Draft -00:

  * Initial revision
